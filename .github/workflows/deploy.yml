name: Deploy to Google Cloud

on:
  push:
    branches:
      - master
  workflow_dispatch:
    inputs:
      force_deploy:
        description: 'Force deploy (ignore cache)'
        required: false
        default: 'false'
      deploy_target:
        description: 'Deploy target (api/client/both)'
        required: false
        default: 'both'
        type: choice
        options:
          - both
          - api
          - client

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  GCS_BUCKET: ${{ secrets.GCS_BUCKET }}
  CLOUD_SQL_CONNECTION_NAME: ${{ secrets.CLOUD_SQL_CONNECTION_NAME }}
  API_SERVICE_NAME: inventory-api
  CLIENT_SERVICE_NAME: inventory-client
  REGION: asia-east1

jobs:
  # Ê™¢Ê∏¨ËÆäÊõ¥ÁöÑÊ™îÊ°àÂíåÂÄâÂ∫´È©óË≠â
  detect-changes:
    name: 'Detect Changes'
    runs-on: ubuntu-latest
    # üîê ÈôêÂà∂Âè™Âú®ÊåáÂÆöÂÄâÂ∫´Âü∑Ë°å
    if: github.repository == 'lomismoney/Mir01'
    outputs:
      api-changed: ${{ steps.changes.outputs.api }}
      client-changed: ${{ steps.changes.outputs.client }}
      client-needs-deploy: ${{ steps.changes.outputs.client-needs-deploy }}
      force-deploy: ${{ github.event.inputs.force_deploy == 'true' }}
      deploy-target: ${{ github.event.inputs.deploy_target || 'both' }}
    steps:
      - name: 'Checkout'
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: 'Detect file changes and dependencies'
        id: changes
        run: |
          # ÂàùÂßãÂåñËÆäÊõ¥Ê™¢Ê∏¨ËÆäÊï∏
          API_CHANGED=false
          CLIENT_CHANGED=false
          
          echo "üîç Ê™¢Êü•ÂÄâÂ∫´: ${{ github.repository }}"
          echo "‚úÖ ÂÄâÂ∫´È©óË≠âÈÄöÈÅé: ${{ github.repository }}"
          
          if [ "${{ github.event.inputs.force_deploy }}" == "true" ]; then
            echo "api=true" >> $GITHUB_OUTPUT
            echo "client=true" >> $GITHUB_OUTPUT
            echo "client-needs-deploy=true" >> $GITHUB_OUTPUT
            echo "üîÑ Âº∑Âà∂ÈÉ®ÁΩ≤ - ÊâÄÊúâÊúçÂãôÂ∞áË¢´ÈáçÊñ∞ÈÉ®ÁΩ≤"
            exit 0
          fi

          # üéØ ËôïÁêÜÊâãÂãïÈÉ®ÁΩ≤ÁõÆÊ®ô
          DEPLOY_TARGET="${{ github.event.inputs.deploy_target || 'both' }}"
          if [ "$DEPLOY_TARGET" == "api" ]; then
            echo "api=true" >> $GITHUB_OUTPUT
            echo "client=false" >> $GITHUB_OUTPUT
            echo "client-needs-deploy=false" >> $GITHUB_OUTPUT
            echo "üéØ ÊâãÂãïÊåáÂÆöÈÉ®ÁΩ≤ API only"
            exit 0
          elif [ "$DEPLOY_TARGET" == "client" ]; then
            echo "api=false" >> $GITHUB_OUTPUT
            echo "client=true" >> $GITHUB_OUTPUT
            echo "client-needs-deploy=true" >> $GITHUB_OUTPUT
            echo "üéØ ÊâãÂãïÊåáÂÆöÈÉ®ÁΩ≤ Client only"
            exit 0
          elif [ "$DEPLOY_TARGET" == "both" ]; then
            echo "api=true" >> $GITHUB_OUTPUT
            echo "client=true" >> $GITHUB_OUTPUT
            echo "client-needs-deploy=true" >> $GITHUB_OUTPUT
            echo "üéØ ÊâãÂãïÊåáÂÆöÈÉ®ÁΩ≤ Both (API + Client)"
            exit 0
          fi

          # üîç Ê™¢Ê∏¨Ëá™ÂãïÊé®ÈÄÅÊôÇÁöÑÊñá‰ª∂ËÆäÊõ¥ÔºàËôïÁêÜÈÇäÁïåÊÉÖÊ≥ÅÔºâ
          echo "üîç Ê™¢Ê∏¨Ê™îÊ°àËÆäÊõ¥..."
          
          # Ê™¢Êü•ÊòØÂê¶ÊòØÂàùÂßãÊèê‰∫§ÊàñÂñÆ‰∏ÄÊèê‰∫§ÁöÑÊÉÖÊ≥Å
          if ! git rev-parse HEAD~1 >/dev/null 2>&1; then
            echo "‚ö†Ô∏è ÂÅµÊ∏¨Âà∞ÂàùÂßãÊèê‰∫§ÊàñÂñÆ‰∏ÄÊèê‰∫§ÔºåÂÅáË®≠ÊâÄÊúâÊ™îÊ°àÈÉΩÊúâËÆäÊõ¥"
            API_CHANGED=true
            CLIENT_CHANGED=true
            echo "üì¶ ÂàùÂßãÈÉ®ÁΩ≤ - API Âíå Client ÈÉΩÈúÄË¶ÅÈÉ®ÁΩ≤"
          else
            # Ê≠£Â∏∏ÁöÑËÆäÊõ¥Ê™¢Ê∏¨
            if git diff --name-only HEAD~1 HEAD | grep -q "^inventory-api/"; then
              API_CHANGED=true
              echo "üì¶ Ê™¢Ê∏¨Âà∞ API ËÆäÊõ¥"
            else
              echo "‚úÖ API ÁÑ°ËÆäÊõ¥"
            fi

            if git diff --name-only HEAD~1 HEAD | grep -q "^inventory-client/"; then
              CLIENT_CHANGED=true
              echo "üì¶ Ê™¢Ê∏¨Âà∞ Client ËÆäÊõ¥"
            else
              echo "‚úÖ Client ÁÑ°ËÆäÊõ¥"
            fi
          fi

          # üîó ‰æùË≥¥ÈÇèËºØÔºöÂ¶ÇÊûú API ÊúâËÆäÊõ¥ÔºåClient ‰πüÈúÄË¶ÅÈáçÊñ∞ÈÉ®ÁΩ≤ÔºàÂêåÊ≠• openapi.yamlÔºâ
          CLIENT_NEEDS_DEPLOY=false
          if [ "$API_CHANGED" = true ]; then
            CLIENT_NEEDS_DEPLOY=true
            if [ "$CLIENT_CHANGED" = true ]; then
              echo "üîó API + Client ÈÉΩÊúâËÆäÊõ¥ -> ÂÖ®Èù¢ÈÉ®ÁΩ≤"
            else
              echo "üîó API ËÆäÊõ¥detected -> Client ÈúÄË¶ÅÂêåÊ≠•ÈÉ®ÁΩ≤ (openapi.yaml ‰æùË≥¥)"
            fi
          elif [ "$CLIENT_CHANGED" = true ]; then
            CLIENT_NEEDS_DEPLOY=true
            echo "üéØ Client Áõ¥Êé•ËÆäÊõ¥ -> Client ÈúÄË¶ÅÈÉ®ÁΩ≤"
          fi

          # Ëº∏Âá∫ÁµêÊûú
          echo "api=$API_CHANGED" >> $GITHUB_OUTPUT
          echo "client=$CLIENT_CHANGED" >> $GITHUB_OUTPUT
          echo "client-needs-deploy=$CLIENT_NEEDS_DEPLOY" >> $GITHUB_OUTPUT
          
          # Á∏ΩÁµêËº∏Âá∫
          echo ""
          echo "üìã ÈÉ®ÁΩ≤Ê±∫Á≠ñÁ∏ΩÁµêÔºö"
          echo "   API ÈÉ®ÁΩ≤: $API_CHANGED"
          echo "   Client ÈÉ®ÁΩ≤: $CLIENT_NEEDS_DEPLOY"
          if [ "$API_CHANGED" = true ] && [ "$CLIENT_CHANGED" = false ]; then
            echo "   ÂéüÂõ†: API ËÆäÊõ¥ -> Client ÂêåÊ≠• openapi.yaml"
          elif [ "$API_CHANGED" = false ] && [ "$CLIENT_CHANGED" = true ]; then
            echo "   ÂéüÂõ†: Client Áõ¥Êé•ËÆäÊõ¥"
          elif [ "$API_CHANGED" = true ] && [ "$CLIENT_CHANGED" = true ]; then
            echo "   ÂéüÂõ†: API Âíå Client ÈÉΩÊúâËÆäÊõ¥"
          elif [ "$API_CHANGED" = false ] && [ "$CLIENT_CHANGED" = false ]; then
            echo "   ÂéüÂõ†: ÁÑ°ËÆäÊõ¥ - ÂèØËÉΩÊòØÊâãÂãïËß∏ÁôºÊàñ force deploy"
          fi

  deploy-api:
    name: 'Deploy API to Cloud Run'
    runs-on: ubuntu-latest
    needs: detect-changes
    # üîê Âè™ÊúâÁï∂ API ÈúÄË¶ÅÈÉ®ÁΩ≤ÊôÇÊâçÂü∑Ë°å
    if: needs.detect-changes.outputs.api-changed == 'true'
    
    permissions:
      contents: 'read'
      id-token: 'write'

    defaults:
      run:
        working-directory: ./inventory-api

    steps:
      - name: 'Checkout'
        uses: actions/checkout@v4

      - name: 'Authenticate to Google Cloud'
        uses: 'google-github-actions/auth@v2'
        with:
          workload_identity_provider: ${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.GCP_SERVICE_ACCOUNT }}
          token_format: 'access_token'

      - name: 'Set up Cloud SDK'
        uses: 'google-github-actions/setup-gcloud@v2'

      - name: 'Setup PHP with Composer'
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.2'
          extensions: gd, zip, pcntl, bcmath, xml, pdo_sqlite
          coverage: none

      - name: 'Cache Composer dependencies'
        uses: actions/cache@v4
        with:
          path: |
            inventory-api/vendor
            ~/.composer/cache
          key: ${{ runner.os }}-composer-${{ hashFiles('inventory-api/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-composer-

      - name: 'Install Composer Dependencies (for Scribe only)'
        run: composer install --prefer-dist --no-progress --optimize-autoloader

      - name: 'Cache OpenAPI Generation'
        id: cache-openapi
        uses: actions/cache@v4
        with:
          path: inventory-api/storage/app/scribe/openapi.yaml
          key: ${{ runner.os }}-openapi-${{ hashFiles('inventory-api/app/Http/**/*.php', 'inventory-api/routes/**/*.php') }}
          restore-keys: |
            ${{ runner.os }}-openapi-

      - name: 'Generate OpenAPI Specification'
        if: steps.cache-openapi.outputs.cache-hit != 'true'
        run: |
          echo "APP_ENV=testing" > .env.testing
          echo "APP_KEY=base64:some_random_key_for_testing" >> .env.testing
          echo "DB_CONNECTION=sqlite" >> .env.testing
          echo "DB_DATABASE=database/testing.sqlite" >> .env.testing
          echo "CACHE_STORE=array" >> .env.testing
          echo "QUEUE_CONNECTION=sync" >> .env.testing
          echo "SESSION_DRIVER=array" >> .env.testing
          echo "DB_CACHE_CONNECTION=sqlite" >> .env.testing
          
          touch database/testing.sqlite
          php artisan migrate:fresh --force --env=testing
          php artisan scribe:generate --verbose --env=testing

      - name: 'Upload OpenAPI as Artifact'
        uses: actions/upload-artifact@v4
        with:
          name: openapi-spec
          path: inventory-api/storage/app/scribe/openapi.yaml

      # üöÄ Docker ÊßãÂª∫ÂÑ™Âåñ - ‰ΩøÁî®Â§öÂ±§Á∑©Â≠ò
      - name: 'Set up Docker Buildx'
        uses: docker/setup-buildx-action@v3

      - name: 'Create Artifact Repository (if not exists)'
        run: |
          gcloud artifacts repositories create ${{ env.API_SERVICE_NAME }}-repo \
            --repository-format=docker \
            --location=${{ env.REGION }} \
            --description="API Docker repository" || echo "‚úÖ Repo already exists"

      - name: 'Configure Docker for Artifact Registry'
        run: gcloud auth configure-docker ${{ env.REGION }}-docker.pkg.dev

      - name: 'Build and Push API Docker Image (Optimized)'
        uses: docker/build-push-action@v5
        with:
          context: ./inventory-api
          push: true
          tags: ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.API_SERVICE_NAME }}-repo/api:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64

      - name: 'Deploy API to Cloud Run (Âõ∫ÂÆöÂüüÂêçÁâàÊú¨)'
        run: |-
          gcloud run deploy ${{ env.API_SERVICE_NAME }} \
            --image=${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.API_SERVICE_NAME }}-repo/api:latest \
            --region=${{ env.REGION }} \
            --platform=managed \
            --allow-unauthenticated \
            --add-cloudsql-instances=${{ env.CLOUD_SQL_CONNECTION_NAME }} \
            --add-volume=name=gcs-storage,type=cloud-storage,bucket=${{ env.GCS_BUCKET }} \
            --add-volume-mount=volume=gcs-storage,mount-path=/mnt/gcs \
            --set-env-vars="APP_ENV=production,APP_NAME=Â∫´Â≠òÁÆ°ÁêÜÁ≥ªÁµ±,APP_DEBUG=false,APP_TIMEZONE=Asia/Taipei,APP_LOCALE=zh_TW,APP_FALLBACK_LOCALE=zh_TW,BCRYPT_ROUNDS=12,APP_MAINTENANCE_DRIVER=file,DB_CONNECTION=mysql,DB_SOCKET=/cloudsql/${{ env.CLOUD_SQL_CONNECTION_NAME }},DB_PORT=3306,DB_DATABASE=lomis_internal,DB_USERNAME=h1431532403240,SESSION_DOMAIN=.lomis.com.tw,SESSION_DRIVER=file,SESSION_LIFETIME=120,SESSION_ENCRYPT=false,SESSION_PATH=/,FILESYSTEM_DISK=gcs,GCS_BUCKET=${{ env.GCS_BUCKET }},GOOGLE_CLOUD_PROJECT_ID=${{ env.PROJECT_ID }},CACHE_STORE=file,QUEUE_CONNECTION=sync,BROADCAST_CONNECTION=log,LOG_CHANNEL=stack,LOG_LEVEL=error,SPATIE_PERMISSION_CACHE_EXPIRATION_TIME=3600,GCS_MOUNT_PATH=/mnt/gcs,FRONTEND_URL=${{ secrets.CLIENT_CUSTOM_DOMAIN_URL }},SANCTUM_STATEFUL_DOMAINS=$(echo '${{ secrets.CLIENT_CUSTOM_DOMAIN_URL }}' | sed 's|https://||' | sed 's|/.*||')" \
            --set-secrets="APP_KEY=LARAVEL_APP_KEY:latest,DB_PASSWORD=LARAVEL_DB_PASSWORD:latest" \
            --timeout=300 \
            --memory=1Gi \
            --cpu=2 \
            --concurrency=80 \
            --min-instances=0 \
            --max-instances=5
        working-directory: . # Ê≠§Ê≠•È©üÂú®Ê†πÁõÆÈåÑÂü∑Ë°å

      # Ë®ªËß£ÔºöÂãïÊÖãÂüüÂêçÁç≤ÂèñÔºà‰øùÁïô‰ª•ÂÇôÂ∞á‰æÜ‰ΩøÁî®Ôºâ
      # - name: 'Get Deployed URLs (ÂãïÊÖãÂüüÂêç - Â∑≤ÂÅúÁî®)'
      #   id: get_urls
      #   run: |-
      #     # Áç≤Âèñ API ÊúçÂãôÁöÑÂØ¶Èöõ URL
      #     API_URL=$(gcloud run services describe ${{ env.API_SERVICE_NAME }} --platform=managed --region=${{ env.REGION }} --format='value(status.url)')
      #     echo "API_URL=$API_URL" >> $GITHUB_OUTPUT
      #     
      #     # ÂòóË©¶Áç≤ÂèñÂâçÁ´ØÊúçÂãô URLÔºàÂ¶ÇÊûúÂ∑≤Â≠òÂú®Ôºâ
      #     CLIENT_URL=$(gcloud run services describe ${{ env.CLIENT_SERVICE_NAME }} --platform=managed --region=${{ env.REGION }} --format='value(status.url)' 2>/dev/null || echo "")
      #     
      #     if [ -z "$CLIENT_URL" ]; then
      #       # Â¶ÇÊûúÂâçÁ´ØÈÇÑÊú™ÈÉ®ÁΩ≤Ôºå‰ΩøÁî® API URL ÁöÑÁõ∏ÂêåÊ®°Âºè
      #       CLIENT_BASE=$(echo $API_URL | sed 's/inventory-api/inventory-client/')
      #       echo "CLIENT_URL=$CLIENT_BASE" >> $GITHUB_OUTPUT
      #     else
      #       echo "CLIENT_URL=$CLIENT_URL" >> $GITHUB_OUTPUT
      #     fi
      #     
      #     # ÊèêÂèñÂüüÂêçÁî®Êñº SANCTUMÔºàÂè™‰ΩøÁî®ÂâçÁ´ØÂüüÂêçÔºâ
      #     CLIENT_DOMAIN=$(echo ${CLIENT_URL:-$CLIENT_BASE} | sed 's|https://||' | sed 's|/.*||')
      #     echo "SANCTUM_DOMAINS=$CLIENT_DOMAIN" >> $GITHUB_OUTPUT
      #     
      #     echo "API URL: $API_URL"
      #     echo "È†êÊúüÁöÑÂâçÁ´Ø URL: ${CLIENT_URL:-$CLIENT_BASE}"
      #   working-directory: . # Ê≠§Ê≠•È©üÂú®Ê†πÁõÆÈåÑÂü∑Ë°å

      - name: 'Run Database Migrations'
        run: |-
          gcloud run jobs create ${{ env.API_SERVICE_NAME }}-migrate \
            --region=${{ env.REGION }} \
            --image=${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.API_SERVICE_NAME }}-repo/api:latest \
            --task-timeout=300 \
            --memory=512Mi \
            --cpu=1 \
            --command=/usr/local/bin/run-artisan.sh \
            --args=migrate,--force \
            --set-cloudsql-instances=${{ env.CLOUD_SQL_CONNECTION_NAME }} \
            --set-env-vars="APP_ENV=production,DB_CONNECTION=mysql,DB_SOCKET=/cloudsql/${{ env.CLOUD_SQL_CONNECTION_NAME }},DB_PORT=3306,DB_DATABASE=lomis_internal,DB_USERNAME=h1431532403240" \
            --set-secrets="APP_KEY=LARAVEL_APP_KEY:latest,DB_PASSWORD=LARAVEL_DB_PASSWORD:latest" \
            --execute-now || \
          gcloud run jobs execute ${{ env.API_SERVICE_NAME }}-migrate \
            --region=${{ env.REGION }} \
            --wait
        working-directory: . # Ê≠§Ê≠•È©üÂú®Ê†πÁõÆÈåÑÂü∑Ë°å

      - name: 'Run Initial Admin Seeder'
        run: |-
          gcloud run jobs create ${{ env.API_SERVICE_NAME }}-seed-admin \
            --region=${{ env.REGION }} \
            --image=${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.API_SERVICE_NAME }}-repo/api:latest \
            --task-timeout=300 \
            --memory=512Mi \
            --cpu=1 \
            --command=/usr/local/bin/run-artisan.sh \
            --args=db:seed,--class=InitialAdminSeeder,--force \
            --set-cloudsql-instances=${{ env.CLOUD_SQL_CONNECTION_NAME }} \
            --set-env-vars="APP_ENV=production,DB_CONNECTION=mysql,DB_SOCKET=/cloudsql/${{ env.CLOUD_SQL_CONNECTION_NAME }},DB_PORT=3306,DB_DATABASE=lomis_internal,DB_USERNAME=h1431532403240" \
            --set-secrets="APP_KEY=LARAVEL_APP_KEY:latest,DB_PASSWORD=LARAVEL_DB_PASSWORD:latest" \
            --execute-now || \
          gcloud run jobs execute ${{ env.API_SERVICE_NAME }}-seed-admin \
            --region=${{ env.REGION }} \
            --wait
        working-directory: . # Ê≠§Ê≠•È©üÂú®Ê†πÁõÆÈåÑÂü∑Ë°å

  deploy-client:
    name: 'Deploy Client to Cloud Run'
    runs-on: ubuntu-latest
    needs: [detect-changes, deploy-api]
    # üîê Client ‰æùË≥¥Ê™¢Ê∏¨ + API ‰æùË≥¥Ê™¢Êü•
    if: |
      always() && 
      needs.detect-changes.outputs.client-needs-deploy == 'true' &&
      (needs.deploy-api.result == 'success' || needs.deploy-api.result == 'skipped')

    permissions:
      contents: 'read'
      id-token: 'write'

    defaults:
      run:
        working-directory: ./inventory-client

    steps:
      - name: 'Deployment Reason Analysis'
        run: |
          echo "üîç ÂâçÁ´ØÈÉ®ÁΩ≤ÂéüÂõ†ÂàÜÊûêÔºö"
          API_CHANGED="${{ needs.detect-changes.outputs.api-changed }}"
          CLIENT_CHANGED="${{ needs.detect-changes.outputs.client-changed }}"
          DEPLOY_TARGET="${{ needs.detect-changes.outputs.deploy-target }}"
          
          if [ "$DEPLOY_TARGET" = "both" ] || [ "$DEPLOY_TARGET" = "client" ]; then
            echo "   üìã ÊâãÂãïÊåáÂÆöÈÉ®ÁΩ≤ÁõÆÊ®ô: $DEPLOY_TARGET"
          elif [ "$API_CHANGED" = "true" ] && [ "$CLIENT_CHANGED" = "false" ]; then
            echo "   üîó API ËÆäÊõ¥‰æùË≥¥ÈÉ®ÁΩ≤ - ÂêåÊ≠•ÊúÄÊñ∞ openapi.yaml"
            echo "   üì¶ API ÊúâËÆäÊõ¥ÔºåÂâçÁ´ØÈúÄË¶ÅÊõ¥Êñ∞È°ûÂûãÂÆöÁæ©"
          elif [ "$API_CHANGED" = "false" ] && [ "$CLIENT_CHANGED" = "true" ]; then
            echo "   üéØ ÂâçÁ´ØÁõ¥Êé•ËÆäÊõ¥ÈÉ®ÁΩ≤"
            echo "   üì¶ ÂâçÁ´Ø‰ª£Á¢ºÊúâËÆäÊõ¥"
          elif [ "$API_CHANGED" = "true" ] && [ "$CLIENT_CHANGED" = "true" ]; then
            echo "   üîÑ API ÂíåÂâçÁ´ØÈÉΩÊúâËÆäÊõ¥"
            echo "   üì¶ ÂÖ®Èù¢ÂêåÊ≠•ÈÉ®ÁΩ≤"
          fi
          echo ""

      - name: 'Checkout'
        uses: actions/checkout@v4

      - name: 'Authenticate to Google Cloud'
        uses: 'google-github-actions/auth@v2'
        with:
          workload_identity_provider: ${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.GCP_SERVICE_ACCOUNT }}
          token_format: 'access_token'

      - name: 'Set up Cloud SDK'
        uses: 'google-github-actions/setup-gcloud@v2'

      - name: 'Download OpenAPI Artifact'
        uses: actions/download-artifact@v4
        with:
          name: openapi-spec
          path: ./inventory-client
        continue-on-error: true

      - name: 'Verify or Generate Fallback OpenAPI'
        run: |
          API_CHANGED="${{ needs.detect-changes.outputs.api-changed }}"
          CLIENT_CHANGED="${{ needs.detect-changes.outputs.client-changed }}"
          DEPLOY_API_RESULT="${{ needs.deploy-api.result }}"
          
          echo "üîç OpenAPI Ê™îÊ°àÁãÄÊÖãÊ™¢Êü•Ôºö"
          echo "   API ËÆäÊõ¥: $API_CHANGED"
          echo "   Client ËÆäÊõ¥: $CLIENT_CHANGED"
          echo "   API ÈÉ®ÁΩ≤ÁµêÊûú: $DEPLOY_API_RESULT"
          
          if [ -f ./openapi.yaml ]; then
            echo "‚úÖ OpenAPI Ê™îÊ°àÂ∑≤ÊàêÂäü‰∏ãËºâ"
            ls -l openapi.yaml
            
            # È©óË≠âÊ™îÊ°àÂÖßÂÆπ
            if [ -s ./openapi.yaml ] && grep -q "openapi:" ./openapi.yaml; then
              echo "‚úÖ OpenAPI Ê™îÊ°àÊ†ºÂºèÈ©óË≠âÈÄöÈÅé"
              if [ "$API_CHANGED" = "true" ]; then
                echo "üîÑ ‰ΩøÁî®ÊúÄÊñ∞ÁîüÊàêÁöÑ OpenAPI Ë¶èÊ†ºÔºàAPI ÊúâËÆäÊõ¥Ôºâ"
              else
                echo "üìã ‰ΩøÁî®Âø´ÂèñÁöÑ OpenAPI Ë¶èÊ†ºÔºàAPI ÁÑ°ËÆäÊõ¥Ôºâ"
              fi
            else
              echo "‚ùå OpenAPI Ê™îÊ°àÊ†ºÂºèÈ©óË≠âÂ§±ÊïóÔºåÊ™îÊ°àÂèØËÉΩÊêçÂ£û"
              echo "üîß Â∞áÂâµÂª∫ fallback Ê™îÊ°à"
              rm -f ./openapi.yaml
            fi
          fi
          
          if [ ! -f ./openapi.yaml ]; then
            echo "‚ö†Ô∏è Êâæ‰∏çÂà∞ÊàñÁÑ°ÊïàÁöÑ OpenAPI Ê™îÊ°à"
            
            if [ "$API_CHANGED" = "true" ] && [ "$DEPLOY_API_RESULT" = "success" ]; then
              echo "‚ùå API ÊúâËÆäÊõ¥‰∏îÈÉ®ÁΩ≤ÊàêÂäüÔºå‰ΩÜÊâæ‰∏çÂà∞ OpenAPI Ê™îÊ°à"
              echo "   ÈÄôÂèØËÉΩË°®Á§∫ API ÈÉ®ÁΩ≤ÈÅéÁ®ã‰∏≠ÁöÑ OpenAPI ÁîüÊàêÊàñ‰∏äÂÇ≥Â§±Êïó"
              echo "üîß ÂâµÂª∫ fallback Ê™îÊ°à‰ª•ÈÅøÂÖçÂâçÁ´ØÊßãÂª∫Â§±Êïó"
            elif [ "$API_CHANGED" = "false" ]; then
              echo "üìã API ÁÑ°ËÆäÊõ¥Ôºå‰ΩøÁî® fallback OpenAPI Ê™îÊ°àÔºàÂâçÁ´ØÂ∞á‰ΩøÁî®ÁèæÊúâÈ°ûÂûãÂÆöÁæ©Ôºâ"
            elif [ "$DEPLOY_API_RESULT" = "skipped" ]; then
              echo "üìã API ÈÉ®ÁΩ≤Ë¢´Ë∑≥ÈÅéÔºå‰ΩøÁî® fallback OpenAPI Ê™îÊ°à"
            fi
            
            # ÂâµÂª∫Âü∫Êú¨ÁöÑ fallback OpenAPI Ê™îÊ°à
            cat > openapi.yaml << 'EOF'
          openapi: 3.0.0
          info:
            title: Inventory API
            version: 1.0.0
            description: 'Fallback API specification for client build'
          servers:
            - url: '${{ secrets.API_CUSTOM_DOMAIN_URL }}'
              description: Production API server
          paths:
            /health:
              get:
                summary: Health check endpoint
                operationId: healthCheck
                responses:
                  '200':
                    description: API is healthy
                    content:
                      application/json:
                        schema:
                          type: object
                          properties:
                            status:
                              type: string
                              example: ok
          components:
            schemas:
              Error:
                type: object
                properties:
                  message:
                    type: string
                  code:
                    type: integer
          EOF
            
            echo "üìÑ Â∑≤ÂâµÂª∫ fallback OpenAPI Ê™îÊ°à"
            echo "   ÈÄôÂ∞áÂÖÅË®±ÂâçÁ´ØÊ≠£Â∏∏ÊßãÂª∫Ôºå‰ΩÜÂèØËÉΩÁº∫Â∞ëÊúÄÊñ∞ÁöÑ API È°ûÂûãÂÆöÁæ©"
          fi
          
          # ÊúÄÁµÇÊ™îÊ°àÁãÄÊÖã
          echo ""
          echo "üìã ÊúÄÁµÇ OpenAPI Ê™îÊ°àÁãÄÊÖãÔºö"
          ls -l openapi.yaml
          echo "Ê™îÊ°àÂ§ßÂ∞è: $(wc -c < openapi.yaml) bytes"
          echo "Ê™îÊ°àË°åÊï∏: $(wc -l < openapi.yaml) lines"

      # üöÄ Node.js Á∑©Â≠òÂÑ™Âåñ
      - name: 'Setup Node.js'
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: inventory-client/package-lock.json

      - name: 'Cache Next.js build'
        uses: actions/cache@v4
        with:
          path: |
            inventory-client/.next/cache
          key: ${{ runner.os }}-nextjs-${{ hashFiles('inventory-client/package-lock.json') }}-${{ hashFiles('inventory-client/**/*.js', 'inventory-client/**/*.jsx', 'inventory-client/**/*.ts', 'inventory-client/**/*.tsx') }}
          restore-keys: |
            ${{ runner.os }}-nextjs-${{ hashFiles('inventory-client/package-lock.json') }}-

      # üöÄ Docker ÊßãÂª∫ÂÑ™Âåñ - ‰ΩøÁî®Â§öÂ±§Á∑©Â≠ò
      - name: 'Set up Docker Buildx'
        uses: docker/setup-buildx-action@v3

      - name: 'Create Artifact Repository (if not exists)'
        run: |
          gcloud artifacts repositories create ${{ env.CLIENT_SERVICE_NAME }}-repo \
            --repository-format=docker \
            --location=${{ env.REGION }} \
            --description="Client Docker repository" || echo "‚úÖ Repo already exists"
        working-directory: ..

      - name: 'Configure Docker for Artifact Registry'
        run: gcloud auth configure-docker ${{ env.REGION }}-docker.pkg.dev

      - name: 'Build and Push Client Docker Image (Optimized)'
        uses: docker/build-push-action@v5
        with:
          context: ./inventory-client
          push: true
          tags: ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.CLIENT_SERVICE_NAME }}-repo/client:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64
          build-args: |
            NEXT_PUBLIC_API_BASE_URL=${{ secrets.API_CUSTOM_DOMAIN_URL }}

      - name: 'Deploy Client to Cloud Run (Âõ∫ÂÆöÂüüÂêçÁâàÊú¨)'
        id: deploy_client
        run: |-
          gcloud run deploy ${{ env.CLIENT_SERVICE_NAME }} \
            --image=${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.CLIENT_SERVICE_NAME }}-repo/client:latest \
            --region=${{ env.REGION }} \
            --platform=managed \
            --allow-unauthenticated \
            --set-env-vars="NEXT_PUBLIC_API_BASE_URL=${{ secrets.API_CUSTOM_DOMAIN_URL }},NEXTAUTH_URL=${{ secrets.CLIENT_CUSTOM_DOMAIN_URL }},AUTH_URL=${{ secrets.CLIENT_CUSTOM_DOMAIN_URL }},AUTH_TRUST_HOST=auto" \
            --set-secrets="NEXTAUTH_SECRET=NEXTAUTH_SECRET:latest" \
            --timeout=300 \
            --memory=512Mi \
            --cpu=1 \
            --concurrency=100 \
            --min-instances=0 \
            --max-instances=3
        working-directory: . # Ê≠§Ê≠•È©üÂú®Ê†πÁõÆÈåÑÂü∑Ë°å

      # Ë®ªËß£ÔºöÂãïÊÖãÂüüÂêçÈÉ®ÂàÜÔºà‰øùÁïô‰ª•ÂÇôÂ∞á‰æÜ‰ΩøÁî®Ôºâ
      # - name: 'Determine API URL (ÂãïÊÖãÁâàÊú¨ - Â∑≤ÂÅúÁî®)'
      #   id: get_api_url
      #   run: |-
      #     # ÂÑ™ÂÖà‰ΩøÁî®Ëá™Ë®ÇÁ∂≤ÂüüÔºàÂ¶ÇÊûúÊúâË®≠ÂÆöÔºâ
      #     if [ ! -z "${{ secrets.API_CUSTOM_DOMAIN_URL }}" ]; then
      #       echo "API_URL=${{ secrets.API_CUSTOM_DOMAIN_URL }}" >> $GITHUB_OUTPUT
      #       echo "‰ΩøÁî®Ëá™Ë®ÇÁ∂≤Âüü: ${{ secrets.API_CUSTOM_DOMAIN_URL }}"
      #     else
      #       # Áç≤ÂèñÂØ¶ÈöõÈÉ®ÁΩ≤ÁöÑ API URL
      #       API_URL=$(gcloud run services describe ${{ env.API_SERVICE_NAME }} --platform=managed --region=${{ env.REGION }} --format='value(status.url)')
      #       echo "API_URL=$API_URL" >> $GITHUB_OUTPUT
      #       echo "‰ΩøÁî® Cloud Run URL: $API_URL"
      #     fi
      #   working-directory: . # Ê≠§Ê≠•È©üÂú®Ê†πÁõÆÈåÑÂü∑Ë°å

      - name: 'Display Deployment URLs'
        run: |-
          echo "üéâ ÈÉ®ÁΩ≤ÂÆåÊàêÔºÅ"
          echo ""
          echo "üìã Êú¨Ê¨°ÈÉ®ÁΩ≤Á∏ΩÁµêÔºö"
          API_CHANGED="${{ needs.detect-changes.outputs.api-changed }}"
          CLIENT_CHANGED="${{ needs.detect-changes.outputs.client-changed }}"
          
          if [ "$API_CHANGED" = "true" ] && [ "$CLIENT_CHANGED" = "false" ]; then
            echo "   üîó API ËÆäÊõ¥Ëß∏ÁôºÁöÑ‰æùË≥¥ÈÉ®ÁΩ≤"
            echo "   üì¶ API ÊúâÊõ¥Êñ∞ ‚Üí ÂâçÁ´ØÂêåÊ≠•Êñ∞ÁöÑ API È°ûÂûãÂÆöÁæ©"
          elif [ "$API_CHANGED" = "false" ] && [ "$CLIENT_CHANGED" = "true" ]; then
            echo "   üéØ ÂâçÁ´ØÁç®Á´ãÈÉ®ÁΩ≤"
            echo "   üì¶ Âè™ÊúâÂâçÁ´Ø‰ª£Á¢ºËÆäÊõ¥"
          elif [ "$API_CHANGED" = "true" ] && [ "$CLIENT_CHANGED" = "true" ]; then
            echo "   üîÑ ÂâçÂæåÁ´ØÂÖ®Èù¢Êõ¥Êñ∞"
            echo "   üì¶ API ÂíåÂâçÁ´ØÈÉΩÊúâËÆäÊõ¥"
          fi
          
          echo ""
          echo "üåê ÊúçÂãôÁ∂≤ÂùÄÔºö"
          echo "   API ÊúçÂãô: ${{ secrets.API_CUSTOM_DOMAIN_URL }}"
          echo "   ÂâçÁ´ØÊúçÂãô: ${{ secrets.CLIENT_CUSTOM_DOMAIN_URL }}"
          echo ""
          echo "üí° ‰æùË≥¥ÈÇèËºØË™™ÊòéÔºö"
          echo "   ‚Ä¢ API ËÆäÊõ¥ ‚Üí ÂâçÁ´ØËá™ÂãïÂêåÊ≠• (openapi.yaml ‰æùË≥¥)"
          echo "   ‚Ä¢ ÂâçÁ´ØËÆäÊõ¥ ‚Üí ÂâçÁ´ØÁç®Á´ãÈÉ®ÁΩ≤"
          echo "   ‚Ä¢ ÁÑ°ËÆäÊõ¥ ‚Üí Ë∑≥ÈÅéÈÉ®ÁΩ≤ÔºàÁØÄÁúÅÊôÇÈñìÔºâ"
        working-directory: . # Ê≠§Ê≠•È©üÂú®Ê†πÁõÆÈåÑÂü∑Ë°å

  # üéØ ÈÉ®ÁΩ≤Á∏ΩÁµê
  deployment-summary:
    name: 'Deployment Summary'
    runs-on: ubuntu-latest
    needs: [detect-changes, deploy-api, deploy-client]
    if: always() && github.repository == 'lomismoney/Mir01'
    
    steps:
      - name: 'Complete Deployment Summary'
        run: |
          echo "üèÅ ÂÆåÊï¥ÈÉ®ÁΩ≤Á∏ΩÁµêÂ†±Âëä"
          echo "======================"
          echo ""
          
          # ÂèñÂæóÊâÄÊúâÁõ∏ÈóúËÆäÊï∏
          API_CHANGED="${{ needs.detect-changes.outputs.api-changed }}"
          CLIENT_CHANGED="${{ needs.detect-changes.outputs.client-changed }}"
          CLIENT_NEEDS_DEPLOY="${{ needs.detect-changes.outputs.client-needs-deploy }}"
          FORCE_DEPLOY="${{ needs.detect-changes.outputs.force-deploy }}"
          DEPLOY_TARGET="${{ needs.detect-changes.outputs.deploy-target }}"
          
          DETECT_RESULT="${{ needs.detect-changes.result }}"
          API_RESULT="${{ needs.deploy-api.result }}"
          CLIENT_RESULT="${{ needs.deploy-client.result }}"
          
          echo "üìä ËÆäÊõ¥Ê™¢Ê∏¨ÁµêÊûúÔºö"
          echo "   Ê™¢Ê∏¨ÁãÄÊÖã: $DETECT_RESULT"
          echo "   API ËÆäÊõ¥: $API_CHANGED"
          echo "   Client ËÆäÊõ¥: $CLIENT_CHANGED"
          echo "   Âº∑Âà∂ÈÉ®ÁΩ≤: $FORCE_DEPLOY"
          echo "   ÈÉ®ÁΩ≤ÁõÆÊ®ô: $DEPLOY_TARGET"
          echo ""
          
          echo "üöÄ ÈÉ®ÁΩ≤Âü∑Ë°åÁµêÊûúÔºö"
          echo "   API ÈÉ®ÁΩ≤: $API_RESULT"
          echo "   Client ÈÉ®ÁΩ≤: $CLIENT_RESULT"
          echo ""
          
          # ÂàÜÊûêÈÉ®ÁΩ≤ÁãÄÊ≥Å
          if [ "$DETECT_RESULT" != "success" ]; then
            echo "‚ùå ËÆäÊõ¥Ê™¢Ê∏¨Â§±Êïó - ÈÉ®ÁΩ≤ÊµÅÁ®ãÁï∞Â∏∏ÁµÇÊ≠¢"
            echo "   Ë´ãÊ™¢Êü•ÂÄâÂ∫´Ê¨äÈôêÊàñËÆäÊõ¥Ê™¢Ê∏¨ÈÇèËºØ"
            exit 1
          fi
          
          # Á∏ΩÁµêÈÉ®ÁΩ≤ÂéüÂõ†ÂíåÁµêÊûú
          echo "üìã Êú¨Ê¨°ÈÉ®ÁΩ≤ÂàÜÊûêÔºö"
          
          if [ "$FORCE_DEPLOY" = "true" ]; then
            echo "   üîÑ Âº∑Âà∂ÈÉ®ÁΩ≤Ê®°Âºè"
            echo "   ÂéüÂõ†: ÊâãÂãïËß∏ÁôºÂº∑Âà∂ÈÉ®ÁΩ≤"
          elif [ "$DEPLOY_TARGET" != "both" ] && [ "$DEPLOY_TARGET" != "" ]; then
            echo "   üéØ ÊâãÂãïÊåáÂÆöÈÉ®ÁΩ≤"
            echo "   ÁõÆÊ®ô: $DEPLOY_TARGET"
          elif [ "$API_CHANGED" = "true" ] && [ "$CLIENT_CHANGED" = "false" ]; then
            echo "   üîó API ËÆäÊõ¥Ëß∏ÁôºÈÄ£ÈéñÈÉ®ÁΩ≤"
            echo "   ÂéüÂõ†: API ËÆäÊõ¥ ‚Üí Client ÂêåÊ≠• openapi.yaml"
          elif [ "$API_CHANGED" = "false" ] && [ "$CLIENT_CHANGED" = "true" ]; then
            echo "   üéØ ÂâçÁ´ØÁç®Á´ãÈÉ®ÁΩ≤"
            echo "   ÂéüÂõ†: Âè™ÊúâÂâçÁ´Ø‰ª£Á¢ºËÆäÊõ¥"
          elif [ "$API_CHANGED" = "true" ] && [ "$CLIENT_CHANGED" = "true" ]; then
            echo "   üîÑ ÂÖ®Èù¢Êõ¥Êñ∞ÈÉ®ÁΩ≤"
            echo "   ÂéüÂõ†: API ÂíåÂâçÁ´ØÈÉΩÊúâËÆäÊõ¥"
          else
            echo "   ‚úÖ ÁÑ°ËÆäÊõ¥ÔºåË∑≥ÈÅéÈÉ®ÁΩ≤"
            echo "   ÂéüÂõ†: Ê≤íÊúâÊ™¢Ê∏¨Âà∞Áõ∏ÈóúÊ™îÊ°àËÆäÊõ¥"
          fi
          
          echo ""
          
          # Ê™¢Êü•ÈÉ®ÁΩ≤ÊàêÂäüÁãÄÊ≥Å
          SUCCESS_COUNT=0
          SKIP_COUNT=0
          FAIL_COUNT=0
          
          if [ "$API_RESULT" = "success" ]; then
            SUCCESS_COUNT=$((SUCCESS_COUNT + 1))
            echo "‚úÖ API ÈÉ®ÁΩ≤ÊàêÂäü"
          elif [ "$API_RESULT" = "skipped" ]; then
            SKIP_COUNT=$((SKIP_COUNT + 1))
            echo "‚è≠Ô∏è API ÈÉ®ÁΩ≤Ë∑≥ÈÅéÔºàÁÑ°ÈúÄÊõ¥Êñ∞Ôºâ"
          elif [ "$API_RESULT" = "failure" ]; then
            FAIL_COUNT=$((FAIL_COUNT + 1))
            echo "‚ùå API ÈÉ®ÁΩ≤Â§±Êïó"
          fi
          
          if [ "$CLIENT_RESULT" = "success" ]; then
            SUCCESS_COUNT=$((SUCCESS_COUNT + 1))
            echo "‚úÖ ÂâçÁ´ØÈÉ®ÁΩ≤ÊàêÂäü"
          elif [ "$CLIENT_RESULT" = "skipped" ]; then
            SKIP_COUNT=$((SKIP_COUNT + 1))
            echo "‚è≠Ô∏è ÂâçÁ´ØÈÉ®ÁΩ≤Ë∑≥ÈÅéÔºàÁÑ°ÈúÄÊõ¥Êñ∞Êàñ‰æùË≥¥Â§±ÊïóÔºâ"
          elif [ "$CLIENT_RESULT" = "failure" ]; then
            FAIL_COUNT=$((FAIL_COUNT + 1))
            echo "‚ùå ÂâçÁ´ØÈÉ®ÁΩ≤Â§±Êïó"
          fi
          
          echo ""
          echo "üìà ÈÉ®ÁΩ≤Áµ±Ë®àÔºö"
          echo "   ÊàêÂäü: $SUCCESS_COUNT È†Ö"
          echo "   Ë∑≥ÈÅé: $SKIP_COUNT È†Ö"
          echo "   Â§±Êïó: $FAIL_COUNT È†Ö"
          
          if [ $FAIL_COUNT -gt 0 ]; then
            echo ""
            echo "üö® ÈÉ®ÁΩ≤Ë≠¶ÂëäÔºö"
            echo "   Êúâ $FAIL_COUNT È†ÖÈÉ®ÁΩ≤Â§±ÊïóÔºåË´ãÊ™¢Êü•‰∏äËø∞Êó•Ë™å"
            if [ "$API_RESULT" = "failure" ] && [ "$CLIENT_RESULT" = "skipped" ]; then
              echo "   üí° ÂâçÁ´ØÂèØËÉΩÂõ†ÁÇ∫ API ÈÉ®ÁΩ≤Â§±ÊïóËÄåË¢´Ë∑≥ÈÅé"
            fi
          elif [ $SUCCESS_COUNT -gt 0 ]; then
            echo ""
            echo "üéâ ÈÉ®ÁΩ≤ÊàêÂäüÂÆåÊàêÔºÅ"
            echo ""
            echo "üåê ÊúçÂãôÁ∂≤ÂùÄÔºö"
            echo "   API: ${{ secrets.API_CUSTOM_DOMAIN_URL }}"
            echo "   ÂâçÁ´Ø: ${{ secrets.CLIENT_CUSTOM_DOMAIN_URL }}"
          else
            echo ""
            echo "‚úÖ ÁÑ°ÈúÄÈÉ®ÁΩ≤ÔºåÁ≥ªÁµ±‰øùÊåÅÊúÄÊñ∞ÁãÄÊÖã"
            echo "   ÁØÄÁúÅÈÉ®ÁΩ≤ÊôÇÈñìÂíåË≥áÊ∫ê"
          fi
          
          echo ""
          echo "‚è±Ô∏è ÈÉ®ÁΩ≤ÊµÅÁ®ãÂÑ™ÂåñÔºö"
          echo "   ‚Ä¢ Êô∫ËÉΩËÆäÊõ¥Ê™¢Ê∏¨ - Âè™ÈÉ®ÁΩ≤ÂøÖË¶ÅÊúçÂãô"
          echo "   ‚Ä¢ Docker Â§öÂ±§Á∑©Â≠ò - Âä†ÈÄüÊßãÂª∫ÈÅéÁ®ã"
          echo "   ‚Ä¢ OpenAPI ÂêåÊ≠• - Á¢∫‰øùÂâçÂæåÁ´ØÂ•ëÁ¥Ñ‰∏ÄËá¥"
          echo "   ‚Ä¢ ‰æùË≥¥ÈÇèËºØ - API ËÆäÊõ¥Ëá™ÂãïËß∏ÁôºÂâçÁ´ØÂêåÊ≠•"
          
          # Ë®≠ÁΩÆÊúÄÁµÇÈÄÄÂá∫Á¢º
          if [ $FAIL_COUNT -gt 0 ]; then
            echo ""
            echo "‚ùå Â∑•‰ΩúÊµÅÁ®ã‰ª•Â§±ÊïóÁãÄÊÖãÁµêÊùüÔºàÊúâÈÉ®ÁΩ≤Â§±ÊïóÔºâ"
            exit 1
          else
            echo ""
            echo "‚úÖ Â∑•‰ΩúÊµÅÁ®ãÊàêÂäüÂÆåÊàê"
            exit 0
          fi

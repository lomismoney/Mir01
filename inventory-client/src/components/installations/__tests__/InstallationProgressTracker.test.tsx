import React from 'react';
import { render, screen } from '@testing-library/react';
import { InstallationProgressTracker } from '../InstallationProgressTracker';
import { InstallationWithRelations, InstallationStatus } from '@/types/installation';

// Mock date-fns
jest.mock('date-fns', () => ({
  format: jest.fn((date, formatString) => {
    if (formatString === "MM/dd HH:mm") return '12/01 10:30';
    if (formatString === "MM/dd") return '12/01';
    if (formatString === "yyyy/MM/dd HH:mm") return '2023/12/01 10:30';
    return '2023-12-01';
  }),
}));

jest.mock('date-fns/locale', () => ({
  zhTW: {},
}));

// Mock utils
jest.mock('@/lib/utils', () => ({
  cn: (...args: (string | undefined | null | boolean)[]) => args.filter(Boolean).join(' '),
}));

describe('InstallationProgressTracker', () => {
  const baseInstallation = {
    id: 1,
    status: 'pending' as InstallationStatus,
    priority: 'normal',
    installation_type: 'normal',
    notes: '',
    created_at: '2023-12-01T10:00:00Z',
    updated_at: '2023-12-01T10:00:00Z',
    scheduled_date: null,
    actual_start_time: null,
    actual_end_time: null,
    installer: {
      id: 1,
      name: 'ÂºµÂ∏´ÂÇÖ',
      username: 'zhang_master',
    },
    customer: {
      id: 1,
      name: 'Ê∏¨Ë©¶ÂÆ¢Êà∂',
      phone: '0912345678',
      email: 'test@example.com',
    },
    installation_items: [],
  } as Partial<InstallationWithRelations>;

  describe('Âü∫Êú¨Ê∏≤Êüì', () => {
    it('ÊáâË©≤Ê≠£Á¢∫Ê∏≤ÊüìÁ∑äÊπäÁâàÊú¨', () => {
      render(<InstallationProgressTracker installation={baseInstallation} />);

      // Ê™¢Êü•ÈöéÊÆµÊ®ôÁ±§
      expect(screen.getByText('ÂæÖÊéíÁ®ã')).toBeInTheDocument();
      expect(screen.getByText('Â∑≤ÊéíÁ®ã')).toBeInTheDocument();
      expect(screen.getByText('ÈÄ≤Ë°å‰∏≠')).toBeInTheDocument();
      expect(screen.getByText('Â∑≤ÂÆåÊàê')).toBeInTheDocument();
    });

    it('ÊáâË©≤Ê≠£Á¢∫Ê∏≤ÊüìÂÆåÊï¥ÁâàÊú¨', () => {
      render(<InstallationProgressTracker installation={baseInstallation} variant="full" />);

      // Ê™¢Êü•ÈöéÊÆµÊ®ôÁ±§
      expect(screen.getByText('ÂæÖÊéíÁ®ã')).toBeInTheDocument();
      expect(screen.getByText('Â∑≤ÊéíÁ®ã')).toBeInTheDocument();
      expect(screen.getByText('ÈÄ≤Ë°å‰∏≠')).toBeInTheDocument();
      expect(screen.getByText('Â∑≤ÂÆåÊàê')).toBeInTheDocument();

      // Ê™¢Êü•ÊèèËø∞ÊñáÂ≠ó
      expect(screen.getByText('ÂÆâË£ùÂñÆÂ∑≤Âª∫Á´ã')).toBeInTheDocument();
      expect(screen.getByText('ÂàÜÈÖçÁµ¶ ÂºµÂ∏´ÂÇÖ')).toBeInTheDocument();
      expect(screen.getByText('ÂÆâË£ù‰ΩúÊ•≠Âü∑Ë°å‰∏≠')).toBeInTheDocument();
      expect(screen.getByText('ÂÆâË£ù‰ΩúÊ•≠ÂÆåÊàê')).toBeInTheDocument();
    });

    it('ÊáâË©≤È°ØÁ§∫Ê≠£Á¢∫ÁöÑÂúñÊ®ô', () => {
      render(<InstallationProgressTracker installation={baseInstallation} />);

      // Ê™¢Êü•ÊòØÂê¶ÂåÖÂê´ÂúñÊ®ôÊñáÂ≠ó
      expect(screen.getByText('üìã')).toBeInTheDocument();
      expect(screen.getByText('üìÖ')).toBeInTheDocument();
      expect(screen.getByText('üöß')).toBeInTheDocument();
      expect(screen.getByText('‚úÖ')).toBeInTheDocument();
    });
  });

  describe('ÁãÄÊÖãÈ°ØÁ§∫', () => {
    it('ÊáâË©≤Ê≠£Á¢∫È°ØÁ§∫ pending ÁãÄÊÖã', () => {
      const installation = {
        ...baseInstallation,
        status: 'pending' as InstallationStatus,
      };

      render(<InstallationProgressTracker installation={installation} />);

      // pending ÈöéÊÆµÊáâË©≤ÊòØÊ¥ªÂãïÁöÑ
      expect(screen.getByText('ÂæÖÊéíÁ®ã')).toBeInTheDocument();
    });

    it('ÊáâË©≤Ê≠£Á¢∫È°ØÁ§∫ scheduled ÁãÄÊÖã', () => {
      const installation = {
        ...baseInstallation,
        status: 'scheduled' as InstallationStatus,
        scheduled_date: '2023-12-02T09:00:00Z',
      };

      render(<InstallationProgressTracker installation={installation} />);

      expect(screen.getByText('Â∑≤ÊéíÁ®ã')).toBeInTheDocument();
    });

    it('ÊáâË©≤Ê≠£Á¢∫È°ØÁ§∫ in_progress ÁãÄÊÖã', () => {
      const installation = {
        ...baseInstallation,
        status: 'in_progress' as InstallationStatus,
        scheduled_date: '2023-12-02T09:00:00Z',
        actual_start_time: '2023-12-02T09:30:00Z',
      };

      render(<InstallationProgressTracker installation={installation} />);

      expect(screen.getByText('ÈÄ≤Ë°å‰∏≠')).toBeInTheDocument();
    });

    it('ÊáâË©≤Ê≠£Á¢∫È°ØÁ§∫ completed ÁãÄÊÖã', () => {
      const installation = {
        ...baseInstallation,
        status: 'completed' as InstallationStatus,
        scheduled_date: '2023-12-02T09:00:00Z',
        actual_start_time: '2023-12-02T09:30:00Z',
        actual_end_time: '2023-12-02T12:00:00Z',
      };

      render(<InstallationProgressTracker installation={installation} />);

      expect(screen.getByText('Â∑≤ÂÆåÊàê')).toBeInTheDocument();
    });

    it('ÊáâË©≤Ê≠£Á¢∫È°ØÁ§∫ cancelled ÁãÄÊÖã', () => {
      const installation = {
        ...baseInstallation,
        status: 'cancelled' as InstallationStatus,
      };

      render(<InstallationProgressTracker installation={installation} />);

      expect(screen.getByText('Â∑≤ÂèñÊ∂à')).toBeInTheDocument();
      expect(screen.getByText('‚ùå')).toBeInTheDocument();
    });
  });

  describe('ÊôÇÈñìÈ°ØÁ§∫', () => {
    it('ÊáâË©≤Âú®Á∑äÊπäÁâàÊú¨‰∏≠È°ØÁ§∫Ê†ºÂºèÂåñÊôÇÈñì', () => {
      const installation = {
        ...baseInstallation,
        status: 'in_progress' as InstallationStatus,
        scheduled_date: '2023-12-02T09:00:00Z',
        actual_start_time: '2023-12-02T09:30:00Z',
      };

      render(<InstallationProgressTracker installation={installation} variant="compact" />);

      // Ê™¢Êü•ÊòØÂê¶ÊúâÊ†ºÂºèÂåñÁöÑÊôÇÈñìÈ°ØÁ§∫
      const timeElements = screen.getAllByText('12/01');
      expect(timeElements.length).toBeGreaterThanOrEqual(1);
    });

    it('ÊáâË©≤Âú®ÂÆåÊï¥ÁâàÊú¨‰∏≠È°ØÁ§∫Ë©≥Á¥∞ÊôÇÈñì', () => {
      const installation = {
        ...baseInstallation,
        status: 'scheduled' as InstallationStatus,
        scheduled_date: '2023-12-02T09:00:00Z',
      };

      render(<InstallationProgressTracker installation={installation} variant="full" />);

      // Ê™¢Êü•ÊòØÂê¶ÊúâË©≥Á¥∞ÊôÇÈñìÈ°ØÁ§∫
      const detailTimeElements = screen.getAllByText('2023/12/01 10:30');
      expect(detailTimeElements.length).toBeGreaterThanOrEqual(1);
    });

    it('ÊáâË©≤Â∞çÊ≤íÊúâÊôÇÈñìÁöÑÈöéÊÆµÈ°ØÁ§∫‰Ωî‰ΩçÁ¨¶', () => {
      render(<InstallationProgressTracker installation={baseInstallation} variant="compact" />);

      // Ê™¢Êü•ÊòØÂê¶ÊúâÊôÇÈñì‰Ωî‰ΩçÁ¨¶
      const placeholderElements = screen.getAllByText('--/--');
      expect(placeholderElements.length).toBeGreaterThanOrEqual(1);
    });
  });

  describe('ÂÆâË£ùÂ∏´ÂÇÖÈ°ØÁ§∫', () => {
    it('ÊáâË©≤È°ØÁ§∫ÂàÜÈÖçÁöÑÂ∏´ÂÇÖÂêçÁ®±', () => {
             const installation = {
         ...baseInstallation,
         status: 'scheduled' as InstallationStatus,
         installer: {
           id: 1,
           name: 'ÊùéÂ∏´ÂÇÖ',
         },
       } as Partial<InstallationWithRelations>;

      render(<InstallationProgressTracker installation={installation} variant="full" />);

      expect(screen.getByText('ÂàÜÈÖçÁµ¶ ÊùéÂ∏´ÂÇÖ')).toBeInTheDocument();
    });

    it('ÊáâË©≤Âú®Ê≤íÊúâÂ∏´ÂÇÖÊôÇÈ°ØÁ§∫Á≠âÂæÖÂàÜÈÖç', () => {
             const installation = {
         ...baseInstallation,
         status: 'scheduled' as InstallationStatus,
         installer: null,
       } as Partial<InstallationWithRelations>;

      render(<InstallationProgressTracker installation={installation} variant="full" />);

      expect(screen.getByText('Á≠âÂæÖÂàÜÈÖçÂ∏´ÂÇÖ')).toBeInTheDocument();
    });
  });

  describe('ÈÄ≤Â∫¶Ë¶ñË¶∫ÊïàÊûú', () => {
    it('ÊáâË©≤Âú®Á∑äÊπäÁâàÊú¨‰∏≠È°ØÁ§∫ÈÄ≤Â∫¶Ê¢ù', () => {
      const installation = {
        ...baseInstallation,
        status: 'in_progress' as InstallationStatus,
        scheduled_date: '2023-12-02T09:00:00Z',
        actual_start_time: '2023-12-02T09:30:00Z',
      };

      const { container } = render(
        <InstallationProgressTracker installation={installation} variant="compact" />
      );

      // Ê™¢Êü•ÊòØÂê¶ÊúâÂúìÈªûÂÖÉÁ¥†
      const circles = container.querySelectorAll('.rounded-full');
      expect(circles.length).toBeGreaterThan(0);
    });

    it('ÊáâË©≤Âú®ÂÆåÊï¥ÁâàÊú¨‰∏≠È°ØÁ§∫ÂûÇÁõ¥ÊôÇÈñìËª∏', () => {
      const installation = {
        ...baseInstallation,
        status: 'scheduled' as InstallationStatus,
        scheduled_date: '2023-12-02T09:00:00Z',
      };

      const { container } = render(
        <InstallationProgressTracker installation={installation} variant="full" />
      );

      // Ê™¢Êü•ÊòØÂê¶ÊúâÊôÇÈñìËª∏Á∑öÊ¢ù
      expect(container.querySelector('.w-0\\.5')).toBeInTheDocument();
    });
  });

  describe('Â∑≤ÂÆåÊàêÁãÄÊÖãÁöÑÁâπÊÆäÈ°ØÁ§∫', () => {
    it('ÊáâË©≤Âú®Â∑≤ÂÆåÊàêÁöÑÈöéÊÆµÈ°ØÁ§∫ÂãæÈÅ∏Ê®ôË®ò', () => {
      const installation = {
        ...baseInstallation,
        status: 'completed' as InstallationStatus,
        scheduled_date: '2023-12-02T09:00:00Z',
        actual_start_time: '2023-12-02T09:30:00Z',
        actual_end_time: '2023-12-02T12:00:00Z',
      };

      render(<InstallationProgressTracker installation={installation} />);

      // Ê™¢Êü•ÊòØÂê¶ÊúâÂãæÈÅ∏Ê®ôË®ò
      const checkMarks = screen.getAllByText('‚úì');
      expect(checkMarks.length).toBeGreaterThan(0);
    });
  });

  describe('ÁÑ°Â∏´ÂÇÖÊÉÖÊ≥Å', () => {
    it('ÊáâË©≤Ê≠£Á¢∫ËôïÁêÜÊ≤íÊúâ installer ÁöÑÊÉÖÊ≥Å', () => {
      const installation = {
        ...baseInstallation,
        installer: undefined,
      } as Partial<InstallationWithRelations>;

      render(<InstallationProgressTracker installation={installation} variant="full" />);

      expect(screen.getByText('Á≠âÂæÖÂàÜÈÖçÂ∏´ÂÇÖ')).toBeInTheDocument();
    });
  });

  describe('Á©∫ÊôÇÈñìËôïÁêÜ', () => {
    it('ÊáâË©≤Ê≠£Á¢∫ËôïÁêÜÊ≤íÊúâÊôÇÈñìÁöÑÈöéÊÆµ', () => {
      const installation = {
        ...baseInstallation,
        created_at: null,
        scheduled_date: null,
        actual_start_time: null,
        actual_end_time: null,
      } as Partial<InstallationWithRelations>;

      render(<InstallationProgressTracker installation={installation} />);

      // ÁµÑ‰ª∂ÊáâË©≤‰ªçÁÑ∂ËÉΩÊ≠£Â∏∏Ê∏≤Êüì
      expect(screen.getByText('ÂæÖÊéíÁ®ã')).toBeInTheDocument();
    });
  });

  describe('CSS È°ûÂà•ÊáâÁî®', () => {
    it('ÊáâË©≤Ê≠£Á¢∫ÊáâÁî®Ê®£ÂºèÈ°ûÂà•', () => {
      const { container } = render(
        <InstallationProgressTracker installation={baseInstallation} />
      );

      // Ê™¢Êü•ÊòØÂê¶ÊúâÂü∫Êú¨ÁöÑÂÆπÂô®È°ûÂà•
      expect(container.querySelector('.w-full')).toBeInTheDocument();
      expect(container.querySelector('.space-y-3')).toBeInTheDocument();
    });

    it('ÊáâË©≤Âú®ÂèñÊ∂àÁãÄÊÖã‰∏ãÊáâÁî®ÁâπÊÆäÊ®£Âºè', () => {
      const installation = {
        ...baseInstallation,
        status: 'cancelled' as InstallationStatus,
      };

      const { container } = render(
        <InstallationProgressTracker installation={installation} />
      );

      // Ê™¢Êü•ÂèñÊ∂àÁãÄÊÖãÁöÑÁâπÊÆäÊ®£Âºè
      expect(container.querySelector('.bg-destructive\\/10')).toBeInTheDocument();
    });
  });

  describe('ÈüøÊáâÂºèË®≠Ë®à', () => {
    it('ÊáâË©≤ÂåÖÂê´ÈüøÊáâÂºèÂÖÉÁ¥†', () => {
      const { container } = render(
        <InstallationProgressTracker installation={baseInstallation} variant="compact" />
      );

      // Ê™¢Êü•ÊòØÂê¶Êúâ flex ‰ΩàÂ±ÄÁõ∏ÈóúÁöÑÈ°ûÂà•
      expect(container.querySelector('.flex')).toBeInTheDocument();
    });
  });
}); 
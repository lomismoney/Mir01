/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/api/attributes": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieves the collection of Attribute resources.
         * @description Retrieves the collection of Attribute resources.
         */
        get: operations["api_apiattributes_get_collection"];
        put?: never;
        /**
         * Creates a Attribute resource.
         * @description Creates a Attribute resource.
         */
        post: operations["api_apiattributes_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/attributes/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieves a Attribute resource.
         * @description Retrieves a Attribute resource.
         */
        get: operations["api_apiattributes_id_get"];
        /**
         * Replaces the Attribute resource.
         * @description Replaces the Attribute resource.
         */
        put: operations["api_apiattributes_id_put"];
        post?: never;
        /**
         * Removes the Attribute resource.
         * @description Removes the Attribute resource.
         */
        delete: operations["api_apiattributes_id_delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/categories": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieves the collection of Category resources.
         * @description Retrieves the collection of Category resources.
         */
        get: operations["api_apicategories_get_collection"];
        put?: never;
        /**
         * Creates a Category resource.
         * @description Creates a Category resource.
         */
        post: operations["api_apicategories_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/categories/batch-reorder": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Creates a Category resource.
         * @description Creates a Category resource.
         */
        post: operations["batch_reorder"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/categories/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieves a Category resource.
         * @description Retrieves a Category resource.
         */
        get: operations["api_apicategories_id_get"];
        /**
         * Replaces the Category resource.
         * @description Replaces the Category resource.
         */
        put: operations["api_apicategories_id_put"];
        post?: never;
        /**
         * Removes the Category resource.
         * @description Removes the Category resource.
         */
        delete: operations["api_apicategories_id_delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/stores": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieves the collection of Store resources.
         * @description Retrieves the collection of Store resources.
         */
        get: operations["api_apistores_get_collection"];
        put?: never;
        /**
         * Creates a Store resource.
         * @description Creates a Store resource.
         */
        post: operations["api_apistores_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/stores/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieves a Store resource.
         * @description Retrieves a Store resource.
         */
        get: operations["api_apistores_id_get"];
        /**
         * Replaces the Store resource.
         * @description Replaces the Store resource.
         */
        put: operations["api_apistores_id_put"];
        post?: never;
        /**
         * Removes the Store resource.
         * @description Removes the Store resource.
         */
        delete: operations["api_apistores_id_delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /** @description 商品屬性管理 */
        Attribute: {
            readonly id?: number;
            name?: string;
            /** Format: date-time */
            readonly created_at?: string | null;
            /** Format: date-time */
            readonly updated_at?: string | null;
            readonly products_count?: string | null;
        };
        /** @description 商品屬性管理 */
        "Attribute.jsonld": {
            readonly "@context"?: string | ({
                "@vocab": string;
                /** @enum {string} */
                hydra: "http://www.w3.org/ns/hydra/core#";
            } & {
                [key: string]: unknown;
            });
            readonly "@id"?: string;
            readonly "@type"?: string;
            readonly id?: number;
            name?: string;
            /** Format: date-time */
            readonly created_at?: string | null;
            /** Format: date-time */
            readonly updated_at?: string | null;
            readonly products_count?: string | null;
        };
        /** @description 商品分類管理 */
        Category: {
            readonly id?: number;
            name?: string;
            description?: string | null;
            sort_order?: number;
            /** Format: date-time */
            readonly created_at?: string | null;
            /** Format: date-time */
            readonly updated_at?: string | null;
            /**
             * Format: iri-reference
             * @example https://example.com/
             */
            parent?: string;
            /** @description 檢查是否有子分類 */
            children?: string[];
            descendants?: string[];
        };
        /** @description 商品分類管理 */
        "Category.jsonld": {
            readonly "@context"?: string | ({
                "@vocab": string;
                /** @enum {string} */
                hydra: "http://www.w3.org/ns/hydra/core#";
            } & {
                [key: string]: unknown;
            });
            readonly "@id"?: string;
            readonly "@type"?: string;
            readonly id?: number;
            name?: string;
            description?: string | null;
            sort_order?: number;
            /** Format: date-time */
            readonly created_at?: string | null;
            /** Format: date-time */
            readonly updated_at?: string | null;
            /**
             * Format: iri-reference
             * @example https://example.com/
             */
            parent?: string;
            /** @description 檢查是否有子分類 */
            children?: string[];
            descendants?: string[];
        };
        /** @description 分店管理 */
        Store: {
            readonly id?: number;
            name?: string;
            readonly code?: string;
            address?: string | null;
            readonly phone?: string | null;
            readonly manager_id?: string | null;
            readonly is_active?: string;
            /** Format: date-time */
            readonly created_at?: string | null;
            /** Format: date-time */
            readonly updated_at?: string | null;
        };
        /** @description 分店管理 */
        "Store.jsonld": {
            readonly "@context"?: string | ({
                "@vocab": string;
                /** @enum {string} */
                hydra: "http://www.w3.org/ns/hydra/core#";
            } & {
                [key: string]: unknown;
            });
            readonly "@id"?: string;
            readonly "@type"?: string;
            readonly id?: number;
            name?: string;
            readonly code?: string;
            address?: string | null;
            readonly phone?: string | null;
            readonly manager_id?: string | null;
            readonly is_active?: string;
            /** Format: date-time */
            readonly created_at?: string | null;
            /** Format: date-time */
            readonly updated_at?: string | null;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    api_apiattributes_get_collection: {
        parameters: {
            query?: {
                /** @description The collection page number */
                page?: number;
                /** @description The number of items per page */
                per_page?: number;
                /** @description Enable or disable pagination */
                pagination?: boolean;
                /** @description Attribute search */
                search?: string;
                /** @description Attribute order[name] */
                "order[name]"?: "asc" | "desc";
                /** @description Attribute order[created_at] */
                "order[created_at]"?: "asc" | "desc";
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Attribute collection */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Attribute"][];
                    "application/ld+json": {
                        member: components["schemas"]["Attribute.jsonld"][];
                        totalItems?: number;
                        /** @example {
                         *       "@id": "string",
                         *       "type": "string",
                         *       "first": "string",
                         *       "last": "string",
                         *       "previous": "string",
                         *       "next": "string"
                         *     } */
                        view?: {
                            /** Format: iri-reference */
                            "@id"?: string;
                            "@type"?: string;
                            /** Format: iri-reference */
                            first?: string;
                            /** Format: iri-reference */
                            last?: string;
                            /** Format: iri-reference */
                            previous?: string;
                            /** Format: iri-reference */
                            next?: string;
                        };
                        search?: {
                            "@type"?: string;
                            template?: string;
                            variableRepresentation?: string;
                            mapping?: {
                                "@type"?: string;
                                variable?: string;
                                property?: string | null;
                                required?: boolean;
                            }[];
                        };
                    };
                    "text/html": components["schemas"]["Attribute"][];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    api_apiattributes_post: {
        parameters: {
            query?: {
                /** @description Attribute search */
                search?: string;
                /** @description Attribute order[name] */
                "order[name]"?: "asc" | "desc";
                /** @description Attribute order[created_at] */
                "order[created_at]"?: "asc" | "desc";
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description The new Attribute resource */
        requestBody: {
            content: {
                "application/json": components["schemas"]["Attribute"];
                "application/ld+json": components["schemas"]["Attribute.jsonld"];
                "text/html": components["schemas"]["Attribute"];
            };
        };
        responses: {
            /** @description Attribute resource created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Attribute"];
                    "application/ld+json": components["schemas"]["Attribute.jsonld"];
                    "text/html": components["schemas"]["Attribute"];
                };
            };
            /** @description Invalid input */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    api_apiattributes_id_get: {
        parameters: {
            query?: {
                /** @description Attribute search */
                search?: string;
                /** @description Attribute order[name] */
                "order[name]"?: "asc" | "desc";
                /** @description Attribute order[created_at] */
                "order[created_at]"?: "asc" | "desc";
            };
            header?: never;
            path: {
                /** @description Attribute identifier */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Attribute resource */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Attribute"];
                    "application/ld+json": components["schemas"]["Attribute.jsonld"];
                    "text/html": components["schemas"]["Attribute"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    api_apiattributes_id_put: {
        parameters: {
            query?: {
                /** @description Attribute search */
                search?: string;
                /** @description Attribute order[name] */
                "order[name]"?: "asc" | "desc";
                /** @description Attribute order[created_at] */
                "order[created_at]"?: "asc" | "desc";
            };
            header?: never;
            path: {
                /** @description Attribute identifier */
                id: string;
            };
            cookie?: never;
        };
        /** @description The updated Attribute resource */
        requestBody: {
            content: {
                "application/json": components["schemas"]["Attribute"];
                "application/ld+json": components["schemas"]["Attribute.jsonld"];
                "text/html": components["schemas"]["Attribute"];
            };
        };
        responses: {
            /** @description Attribute resource updated */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Attribute"];
                    "application/ld+json": components["schemas"]["Attribute.jsonld"];
                    "text/html": components["schemas"]["Attribute"];
                };
            };
            /** @description Invalid input */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    api_apiattributes_id_delete: {
        parameters: {
            query?: {
                /** @description Attribute search */
                search?: string;
                /** @description Attribute order[name] */
                "order[name]"?: "asc" | "desc";
                /** @description Attribute order[created_at] */
                "order[created_at]"?: "asc" | "desc";
            };
            header?: never;
            path: {
                /** @description Attribute identifier */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Attribute resource deleted */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    api_apicategories_get_collection: {
        parameters: {
            query?: {
                /** @description The collection page number */
                page?: number;
                /** @description The number of items per page */
                per_page?: number;
                /** @description Enable or disable pagination */
                pagination?: boolean;
                /** @description Category search */
                search?: string;
                /** @description Category parent_id */
                parent_id?: string;
                /** @description Category order[name] */
                "order[name]"?: "asc" | "desc";
                /** @description Category order[sort_order] */
                "order[sort_order]"?: "asc" | "desc";
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Category collection */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Category"][];
                    "application/ld+json": {
                        member: components["schemas"]["Category.jsonld"][];
                        totalItems?: number;
                        /** @example {
                         *       "@id": "string",
                         *       "type": "string",
                         *       "first": "string",
                         *       "last": "string",
                         *       "previous": "string",
                         *       "next": "string"
                         *     } */
                        view?: {
                            /** Format: iri-reference */
                            "@id"?: string;
                            "@type"?: string;
                            /** Format: iri-reference */
                            first?: string;
                            /** Format: iri-reference */
                            last?: string;
                            /** Format: iri-reference */
                            previous?: string;
                            /** Format: iri-reference */
                            next?: string;
                        };
                        search?: {
                            "@type"?: string;
                            template?: string;
                            variableRepresentation?: string;
                            mapping?: {
                                "@type"?: string;
                                variable?: string;
                                property?: string | null;
                                required?: boolean;
                            }[];
                        };
                    };
                    "text/html": components["schemas"]["Category"][];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    api_apicategories_post: {
        parameters: {
            query?: {
                /** @description Category search */
                search?: string;
                /** @description Category parent_id */
                parent_id?: string;
                /** @description Category order[name] */
                "order[name]"?: "asc" | "desc";
                /** @description Category order[sort_order] */
                "order[sort_order]"?: "asc" | "desc";
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description The new Category resource */
        requestBody: {
            content: {
                "application/json": components["schemas"]["Category"];
                "application/ld+json": components["schemas"]["Category.jsonld"];
                "text/html": components["schemas"]["Category"];
            };
        };
        responses: {
            /** @description Category resource created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Category"];
                    "application/ld+json": components["schemas"]["Category.jsonld"];
                    "text/html": components["schemas"]["Category"];
                };
            };
            /** @description Invalid input */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    batch_reorder: {
        parameters: {
            query?: {
                /** @description Category search */
                search?: string;
                /** @description Category parent_id */
                parent_id?: string;
                /** @description Category order[name] */
                "order[name]"?: "asc" | "desc";
                /** @description Category order[sort_order] */
                "order[sort_order]"?: "asc" | "desc";
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description The new Category resource */
        requestBody: {
            content: {
                "application/json": components["schemas"]["Category"];
                "application/ld+json": components["schemas"]["Category.jsonld"];
                "text/html": components["schemas"]["Category"];
            };
        };
        responses: {
            /** @description Category resource created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Category"];
                    "application/ld+json": components["schemas"]["Category.jsonld"];
                    "text/html": components["schemas"]["Category"];
                };
            };
            /** @description Invalid input */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    api_apicategories_id_get: {
        parameters: {
            query?: {
                /** @description Category search */
                search?: string;
                /** @description Category parent_id */
                parent_id?: string;
                /** @description Category order[name] */
                "order[name]"?: "asc" | "desc";
                /** @description Category order[sort_order] */
                "order[sort_order]"?: "asc" | "desc";
            };
            header?: never;
            path: {
                /** @description Category identifier */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Category resource */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Category"];
                    "application/ld+json": components["schemas"]["Category.jsonld"];
                    "text/html": components["schemas"]["Category"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    api_apicategories_id_put: {
        parameters: {
            query?: {
                /** @description Category search */
                search?: string;
                /** @description Category parent_id */
                parent_id?: string;
                /** @description Category order[name] */
                "order[name]"?: "asc" | "desc";
                /** @description Category order[sort_order] */
                "order[sort_order]"?: "asc" | "desc";
            };
            header?: never;
            path: {
                /** @description Category identifier */
                id: string;
            };
            cookie?: never;
        };
        /** @description The updated Category resource */
        requestBody: {
            content: {
                "application/json": components["schemas"]["Category"];
                "application/ld+json": components["schemas"]["Category.jsonld"];
                "text/html": components["schemas"]["Category"];
            };
        };
        responses: {
            /** @description Category resource updated */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Category"];
                    "application/ld+json": components["schemas"]["Category.jsonld"];
                    "text/html": components["schemas"]["Category"];
                };
            };
            /** @description Invalid input */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    api_apicategories_id_delete: {
        parameters: {
            query?: {
                /** @description Category search */
                search?: string;
                /** @description Category parent_id */
                parent_id?: string;
                /** @description Category order[name] */
                "order[name]"?: "asc" | "desc";
                /** @description Category order[sort_order] */
                "order[sort_order]"?: "asc" | "desc";
            };
            header?: never;
            path: {
                /** @description Category identifier */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Category resource deleted */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    api_apistores_get_collection: {
        parameters: {
            query?: {
                /** @description The collection page number */
                page?: number;
                /** @description The number of items per page */
                per_page?: number;
                /** @description Enable or disable pagination */
                pagination?: boolean;
                /** @description Store search */
                search?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Store collection */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Store"][];
                    "application/ld+json": {
                        member: components["schemas"]["Store.jsonld"][];
                        totalItems?: number;
                        /** @example {
                         *       "@id": "string",
                         *       "type": "string",
                         *       "first": "string",
                         *       "last": "string",
                         *       "previous": "string",
                         *       "next": "string"
                         *     } */
                        view?: {
                            /** Format: iri-reference */
                            "@id"?: string;
                            "@type"?: string;
                            /** Format: iri-reference */
                            first?: string;
                            /** Format: iri-reference */
                            last?: string;
                            /** Format: iri-reference */
                            previous?: string;
                            /** Format: iri-reference */
                            next?: string;
                        };
                        search?: {
                            "@type"?: string;
                            template?: string;
                            variableRepresentation?: string;
                            mapping?: {
                                "@type"?: string;
                                variable?: string;
                                property?: string | null;
                                required?: boolean;
                            }[];
                        };
                    };
                    "text/html": components["schemas"]["Store"][];
                };
            };
        };
    };
    api_apistores_post: {
        parameters: {
            query?: {
                /** @description Store search */
                search?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description The new Store resource */
        requestBody: {
            content: {
                "application/json": components["schemas"]["Store"];
                "application/ld+json": components["schemas"]["Store.jsonld"];
                "text/html": components["schemas"]["Store"];
            };
        };
        responses: {
            /** @description Store resource created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Store"];
                    "application/ld+json": components["schemas"]["Store.jsonld"];
                    "text/html": components["schemas"]["Store"];
                };
            };
            /** @description Invalid input */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    api_apistores_id_get: {
        parameters: {
            query?: {
                /** @description Store search */
                search?: string;
            };
            header?: never;
            path: {
                /** @description Store identifier */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Store resource */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Store"];
                    "application/ld+json": components["schemas"]["Store.jsonld"];
                    "text/html": components["schemas"]["Store"];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    api_apistores_id_put: {
        parameters: {
            query?: {
                /** @description Store search */
                search?: string;
            };
            header?: never;
            path: {
                /** @description Store identifier */
                id: string;
            };
            cookie?: never;
        };
        /** @description The updated Store resource */
        requestBody: {
            content: {
                "application/json": components["schemas"]["Store"];
                "application/ld+json": components["schemas"]["Store.jsonld"];
                "text/html": components["schemas"]["Store"];
            };
        };
        responses: {
            /** @description Store resource updated */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Store"];
                    "application/ld+json": components["schemas"]["Store.jsonld"];
                    "text/html": components["schemas"]["Store"];
                };
            };
            /** @description Invalid input */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    api_apistores_id_delete: {
        parameters: {
            query?: {
                /** @description Store search */
                search?: string;
            };
            header?: never;
            path: {
                /** @description Store identifier */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Store resource deleted */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
}

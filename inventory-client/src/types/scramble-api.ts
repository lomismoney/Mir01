/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/categories": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 顯示分類列表
         * @description 【完美架構重構】返回標準的扁平分類結構
         *     遵循 RESTful 設計原則，分離關注點：
         *     - 後端職責：提供完整、準確的數據
         *     - 前端職責：處理展示邏輯（樹狀結構建構）
         *
         *     架構優勢：
         *     1. Scramble PRO 完美支援標準 ResourceCollection
         *     2. 符合 RESTful 最佳實踐
         *     3. 前後端職責清晰分離
         *     4. 更好的快取和擴展性
         */
        get: operations["categories.index"];
        put?: never;
        /**
         * 儲存新建立的分類資源
         * @description 【DTO 驅動遷移】使用 CategoryData DTO 進行數據驗證和轉換
         *     驗證邏輯已遷移至 CategoryData，支援：
         *     - 分類名稱必填且不超過255字符
         *     - 父分類ID必須存在於資料表中
         *     - 描述為可選欄位
         *     - 排序順序支援
         */
        post: operations["categories.store"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/categories/{category}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 顯示指定的分類資源
         * @description 返回單一分類的詳細資訊，使用 CategoryResource 格式化輸出
         *     包含該分類的商品數量統計
         */
        get: operations["categories.show"];
        /**
         * 更新指定的分類資源
         * @description 【DTO 驅動遷移】使用 CategoryData DTO 進行數據驗證和轉換
         *     驗證邏輯已遷移至 CategoryData，支援：
         *     - 部分更新支援（sometimes 規則）
         *     - 防止自我循環的業務邏輯保護
         *     - 確保父分類存在性檢查
         *     - 排序順序支援
         */
        put: operations["categories.update"];
        post?: never;
        /**
         * 刪除指定的分類資源
         * @description 執行軟刪除操作，根據資料表外鍵約束設定：
         *     - 當分類被刪除時，其子分類也會被級聯刪除
         *     - 關聯的商品 category_id 會被設為 null
         */
        delete: operations["categories.destroy"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/categories/batch-reorder": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * 批量重新排序分類
         * @description 處理前端拖曳排序功能的批量更新請求
         *     使用事務確保操作的原子性
         */
        post: operations["category.reorder"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /** App.Http.Resources.Api.CategoryResource */
        "App.Http.Resources.Api.CategoryResource": {
            id: number;
            name: string;
            description: string | null;
            parent_id: number | null;
            sort_order: number;
            products_count?: number;
            total_products_count: string;
        };
        /**
         * CategoryData
         * @description CategoryData DTO
         *
         *     分類管理的單一事實來源，整合數據結構與驗證規則
         *     支援階層式分類結構、自我循環檢查和拖曳排序功能
         *
         *     此 DTO 將取代 StoreCategoryRequest 和 UpdateCategoryRequest
         *     提供類型安全的資料轉換和 100% 準確的 OpenAPI 契約生成
         */
        CategoryData: {
            id?: number;
            name?: string;
            description?: string | null;
            parent_id?: number | null;
            sort_order?: number;
        };
        /** CategoryResource */
        CategoryResource: {
            id: number;
            name: string;
            description: string | null;
            parent_id: number | null;
            sort_order: number;
            /** Format: date-time */
            created_at: string | null;
            /** Format: date-time */
            updated_at: string | null;
        };
        /** ReorderCategoriesRequest */
        ReorderCategoriesRequest: {
            items: {
                id: number;
                sort_order: number;
            }[];
        };
    };
    responses: {
        /** @description Authorization error */
        AuthorizationException: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": {
                    /** @description Error overview. */
                    message: string;
                };
            };
        };
        /** @description Unauthenticated */
        AuthenticationException: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": {
                    /** @description Error overview. */
                    message: string;
                };
            };
        };
        /** @description Validation error */
        ValidationException: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": {
                    /** @description Errors overview. */
                    message: string;
                    /** @description A detailed description of each field that failed validation. */
                    errors: {
                        [key: string]: string[];
                    };
                };
            };
        };
        /** @description Not found */
        ModelNotFoundException: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": {
                    /** @description Error overview. */
                    message: string;
                };
            };
        };
    };
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    "categories.index": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Array of `CategoryResource` */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["CategoryResource"][];
                    };
                };
            };
            401: components["responses"]["AuthenticationException"];
            403: components["responses"]["AuthorizationException"];
        };
    };
    "categories.store": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description `CategoryData` */
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CategoryData"];
            };
        };
        responses: {
            /** @description `App.Http.Resources.Api.CategoryResource` */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["App.Http.Resources.Api.CategoryResource"];
                    };
                };
            };
            401: components["responses"]["AuthenticationException"];
            403: components["responses"]["AuthorizationException"];
            422: components["responses"]["ValidationException"];
        };
    };
    "categories.show": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The category ID */
                category: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description `App.Http.Resources.Api.CategoryResource` */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["App.Http.Resources.Api.CategoryResource"];
                    };
                };
            };
            401: components["responses"]["AuthenticationException"];
            403: components["responses"]["AuthorizationException"];
            404: components["responses"]["ModelNotFoundException"];
        };
    };
    "categories.update": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The category ID */
                category: number;
            };
            cookie?: never;
        };
        /** @description `CategoryData` */
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CategoryData"];
            };
        };
        responses: {
            /** @description `App.Http.Resources.Api.CategoryResource` */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["App.Http.Resources.Api.CategoryResource"];
                    };
                };
            };
            401: components["responses"]["AuthenticationException"];
            403: components["responses"]["AuthorizationException"];
            404: components["responses"]["ModelNotFoundException"];
            422: components["responses"]["ValidationException"];
        };
    };
    "categories.destroy": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The category ID */
                category: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No content */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            401: components["responses"]["AuthenticationException"];
            403: components["responses"]["AuthorizationException"];
            404: components["responses"]["ModelNotFoundException"];
        };
    };
    "category.reorder": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ReorderCategoriesRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @enum {string} */
                        message: "分類順序已成功更新。";
                    };
                };
            };
            401: components["responses"]["AuthenticationException"];
            403: components["responses"]["AuthorizationException"];
            422: components["responses"]["ValidationException"];
        };
    };
}
